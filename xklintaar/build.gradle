apply plugin: 'com.android.library'

android {
    compileSdkVersion 27

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

/**
 * 定义方法lintJarImport,引入 XTCLintRules.jar
 *
 * rules for including "lint.jar" in aar
 */
configurations {
    lintJarImport
}

// 链接到lintJar中的lintJarOutput方法,调用jar方法，并获得jar包
dependencies {
    //其引用了模块 “:XKLintRules”的 Gradle configuration “lintJarOutput”。
    lintJarImport project(path: ':XKLintRules', configuration: "lintJarOutput")
}

// 将得到的JAR包复制到目录build/intermediates/lint/下，并且重命名为 lint.jar
task copyLintJar(type: Copy) {
    from(configurations.lintJarImport) {
        rename {
            String fileName ->
                'lint.jar'
        }
    }
    into 'build/intermediates/lint/'
}

// 当项目build到compileLint这一步时执行copyLintJar方法
project.afterEvaluate {
    def compileLintTask = project.tasks.find { it.name == 'compileLint' }
    //对内置的Gradle task “compileLint”做了修改，让其依赖于我们定义的一个task “copyLintJar”。
    compileLintTask.dependsOn(copyLintJar)
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
}


//////// 打包发布配置开始 ////////
apply plugin: 'maven'
ext {
    // 从Github上clone下来的项目的本地地址
    GITHUB_REPO_PATH = "/Users/hufeng/Desktop/XKLint"       //这里指定的就是刚刚新建项目后clone下来的在本地的路径
    PUBLISH_GROUP_ID = 'com.rvakva.android'
    PUBLISH_ARTIFACT_ID = 'xklint'
    PUBLISH_VERSION = '1.0.0'
}
uploadArchives {
    repositories.mavenDeployer {
        def deployPath = file(project.GITHUB_REPO_PATH)
        repository(url: "file://${deployPath.absolutePath}")
        pom.project {
            groupId project.PUBLISH_GROUP_ID
            artifactId project.PUBLISH_ARTIFACT_ID
            version project.PUBLISH_VERSION
        }
    }
}

// 源代码一起打包
task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}
artifacts {
    archives androidSourcesJar
}

//////// 打包发布配置结束 ////////

